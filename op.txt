package com.thoughtworks.mcs.operations

import com.thoughtworks.mcs.McsDataFrame.MCSFluentApi
import org.apache.spark.sql.SQLContext

class SourceData(dataSetName: String) {
  def load(sqlContext: SQLContext): MCSFluentApi = {
    val data = getClass.getResource(s"../$dataSetName.parquet").getPath
    new MCSFluentApi(sqlContext.read.parquet(data), sqlContext)
  }
}

object SourceData{
  def apply(sqlContext: SQLContext, dataSetName:String): MCSFluentApi = new SourceData(dataSetName).load(sqlContext)
}


package com.thoughtworks.mcs.operations

import scala.collection.immutable.HashMap

class GetParam {

  val params = HashMap("mileStoneFrom" -> "01/02/2012", "mileStoneTo" -> "10/02/2012")

  def load(name: String, time: String): Any = {
    params(name)
  }

}

object GetParam {
  def apply(name: String, time: String): Any = new GetParam().load(name, time)
}



package com.thoughtworks.mcs.operations

import com.thoughtworks.mcs.McsDataFrame.MCSFluentApi

object CreateOutput {
  def apply(mcsDF: MCSFluentApi): MCSFluentApi = mcsDF.show()
}

package com.thoughtworks.mcs.implicits

import org.apache.spark.sql.Column
import org.apache.spark.sql.functions._
import org.joda.time.DateTime.parse
import org.joda.time.format.DateTimeFormat.forPattern

class RichColumn(column: Column) {

  def dateDiff(columnOther: Column): Column = {
    udf((dateOne : String, dateTwo : String) => {
      parse(dateOne, forPattern("dd/MM/yyyy")).getMillis - parse(dateTwo, forPattern("dd/MM/yyyy")).getMillis
    }).apply(column,columnOther)
  }

}


package com.thoughtworks.mcs

import org.apache.spark.sql.Column

object MCSConfiguration {
  // Dummy implementation of output sequence for join
  def getOutputSequenceFor(i: Int): Seq[Column] = {
    i match {
      case 0 => Seq(new Column("a.*"), new Column("b.Deployment_Name"), new Column("b.Application_ID"), new Column("b.Application_Name"))
      case 1 => Seq(new Column("a.*"), new Column("b.Full_Name"))
      case _ => Seq(new Column("*"))
    }
  }


}


// Data
val $milestoneFrom = GetParam("mileStoneFrom", "32/12/9999")
val $milestoneTo = GetParam("mileStoneTo", "23/12/9999")

val emp_pre = SourceData(sqlContext, "MaaP.Employee")
val depl_pre = SourceData(sqlContext, "MaaP.AppDir_Deployment")
val pae_pre = SourceData(sqlContext, "MaaP.Production_Access_Event")

val emp = emp_pre.filter(emp_pre.data("in_z") <= $milestoneTo).filter(emp_pre.data("out_z") >= $milestoneFrom)
val depl = depl_pre.filter(depl_pre.data("in_z") <= $milestoneTo).filter(depl_pre.data("out_z") >= $milestoneFrom)
val pae = pae_pre.filter(pae_pre.data("in_z") <= $milestoneTo).filter(pae_pre.data("out_z") >= $milestoneFrom)

// Measure
val filtOpenEvent = "Open"
val colCalc = "REVIEW_AGE"

val enchrichedEvents = pae.filter(pae.data("Event_Status") === filtOpenEvent)
  .addColumn(colCalc, "Int", pae.data("Review_UTC").dateDiff(pae.data("End_UTC")))
  .union(
    pae.filter(pae.data("Event_Status") !== filtOpenEvent)
      .addColumn(colCalc, "Int", pae.data("Review_UTC").dateDiff(pae.data("End_UTC")))
  )
  .joinInner(pae.data("Deployment_ID"), depl, depl.data("Deployment_ID"))
  .joinLeft(pae.data("Event_Login"), emp, emp.data("Kerbose_ID"))

// Metric
CreateOutput(enchrichedEvents)

results.insert("emp",emp)
results.insert("enchrichedEvents",enchrichedEvents)





package com.thoughtworks.mcs

import com.thoughtworks.mcs.McsDataFrame._
import com.thoughtworks.mcs.implicits.RichColumn
import com.thoughtworks.mcs.operations.{CreateOutput, GetParam, SourceData}
import org.apache.spark.sql.{Column, SQLContext}
import org.apache.spark.{SparkConf, SparkContext}
import org.scalatest.{BeforeAndAfterAll, FunSpec, Matchers}

import scala.tools.nsc.Settings
import scala.tools.nsc.interpreter.{IMain, Results}

class MCSDataFrameFluentApiTest extends FunSpec with Matchers with BeforeAndAfterAll{

  implicit def RichColumn(column: Column): RichColumn = new RichColumn(column)

  var sqlContext: SQLContext = _

  override def beforeAll() {
    sqlContext = new SQLContext(new SparkContext(new SparkConf().setAppName("MCSDataFrames").setMaster("local[4]")))
  }

  override def afterAll() {
      sqlContext.sparkContext.stop()
  }

  it("should run MCS using fluent APIs (Spark Data frame like)" ){

    // Data
    val $milestoneFrom = GetParam("mileStoneFrom", "32/12/9999")
    val $milestoneTo = GetParam("mileStoneTo", "23/12/9999")

    val emp_pre = SourceData(sqlContext, "MaaP.Employee")
    val depl_pre = SourceData(sqlContext, "MaaP.AppDir_Deployment")
    val pae_pre = SourceData(sqlContext, "MaaP.Production_Access_Event")

    val emp = emp_pre.filter(emp_pre.data("in_z") <= $milestoneTo).filter(emp_pre.data("out_z") >= $milestoneFrom).show()
    val depl = depl_pre.filter(depl_pre.data("in_z") <= $milestoneTo).filter(depl_pre.data("out_z") >= $milestoneFrom).show()
    val pae = pae_pre.filter(pae_pre.data("in_z") <= $milestoneTo).filter(pae_pre.data("out_z") >= $milestoneFrom).show()

    // Measure
    val filtOpenEvent = "Open"
    val colCalc = "REVIEW_AGE"

    val enchrichedEvents = pae.filter(pae.data("Event_Status") === filtOpenEvent).show()
      .addColumn(colCalc, "Int", pae.data("Review_UTC") dateDiff pae.data("End_UTC")).show()
      .union(
        pae.filter(pae.data("Event_Status") !== filtOpenEvent)
          .addColumn(colCalc, "Int", pae.data("Review_UTC") dateDiff pae.data("End_UTC"))
      )
      .joinInner(pae.data("Deployment_ID"), depl, depl.data("Deployment_ID"))
      .joinLeft(pae.data("Event_Login"), emp, emp.data("Kerbose_ID"))

    // Metric
    CreateOutput(enchrichedEvents)
  }

  it("should test eval of DataFrame Fluent Api" ){
    val settings = new Settings()
    settings.usejavacp.value = true
    var interpreter = new IMain(settings)

    val results = new MCSResults

    interpreter.bind("sqlContext", sqlContext)
    interpreter.bind("results", results)

    assert {
      interpreter.interpret(
        """
          import com.thoughtworks.mcs.operations._
          import com.thoughtworks.mcs.implicits._
          import com.thoughtworks.mcs.McsDataFrame._
          import org.apache.spark.sql.Column
          implicit def RichColumn(column: Column): RichColumn = new RichColumn(column)
        """).equals(Results.Success)
    }

    assert {
      interpreter.interpret(
        """
          // Data
          val $milestoneFrom = GetParam("mileStoneFrom", "32/12/9999")
          val $milestoneTo = GetParam("mileStoneTo", "23/12/9999")

          val emp_pre = SourceData(sqlContext, "MaaP.Employee")
          val depl_pre = SourceData(sqlContext, "MaaP.AppDir_Deployment")
          val pae_pre = SourceData(sqlContext, "MaaP.Production_Access_Event")

          val emp = emp_pre.filter(emp_pre.data("in_z") <= $milestoneTo).filter(emp_pre.data("out_z") >= $milestoneFrom)
          val depl = depl_pre.filter(depl_pre.data("in_z") <= $milestoneTo).filter(depl_pre.data("out_z") >= $milestoneFrom)
          val pae = pae_pre.filter(pae_pre.data("in_z") <= $milestoneTo).filter(pae_pre.data("out_z") >= $milestoneFrom)

          // Measure
          val filtOpenEvent = "Open"
          val colCalc = "REVIEW_AGE"

          val enchrichedEvents = pae.filter(pae.data("Event_Status") === filtOpenEvent)
            .addColumn(colCalc, "Int", pae.data("Review_UTC").dateDiff(pae.data("End_UTC")))
            .union(
              pae.filter(pae.data("Event_Status") !== filtOpenEvent)
                .addColumn(colCalc, "Int", pae.data("Review_UTC").dateDiff(pae.data("End_UTC")))
            )
            .joinInner(pae.data("Deployment_ID"), depl, depl.data("Deployment_ID"))
            .joinLeft(pae.data("Event_Login"), emp, emp.data("Kerbose_ID"))

          // Metric
          CreateOutput(enchrichedEvents)

          results.insert("emp",emp)
          results.insert("enchrichedEvents",enchrichedEvents)

        """).equals(Results.Success)
    }

    results.all.foreach{case (key, value) => println (key + "-->" + value.show)}

    interpreter.reset
  }

  it("should show" ){
    val output = SourceData(sqlContext, "MaaP.Production_Access_Event").show()
    print(output)
  }

  it("should union with filter inside it" ){
    val pae = SourceData(sqlContext, "MaaP.Production_Access_Event")
    val filtOpenEvent = "Open"
  }

  it("should subtract )add column" ){
    val pae = SourceData(sqlContext, "MaaP.Production_Access_Event")
    pae.addColumn("seq_diff", "Integer", pae.data("Deployment_ID").minus(pae.data("session"))).show()
  }
}



package com.thoughtworks.mcs;

import org.apache.commons.io.IOUtils;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.sql.SQLContext;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import scala.tools.nsc.interpreter.Results;

import java.io.IOException;
import java.io.InputStream;

import static org.junit.Assert.assertEquals;

public class MCSTest {

    private static JavaSparkContext javaSparkContext;

    @BeforeClass
    public static void setup() {
        javaSparkContext = new JavaSparkContext(new SparkConf()
                .setAppName("MCS.TestApp")
                .setMaster("local[4]"));
    }

    @AfterClass
    public static void teardown() {
        javaSparkContext.stop();
    }

    @Test
    public void shouldRunMCSFromResourceFile() throws IOException {
        try (InputStream inputStream = this.getClass().getResourceAsStream("./ProductionAccessEvents.measure")) {
            String dsl = IOUtils.toString(inputStream);
            assertEquals(new MCS().run(dsl, new SQLContext(javaSparkContext)), Results.Success$.MODULE$);
        }
    }
}


package com.thoughtworks.mcs

import org.apache.spark.sql.SQLContext
import org.apache.spark.sql.SaveMode.Overwrite
import org.apache.spark.{SparkConf, SparkContext}

object JsonToParquetConverter {

  def main(args: Array[String]) {
    val conf: SparkConf = new SparkConf().setAppName("MCSDataFrames").setMaster("local[4]")
    val sc: SparkContext = new SparkContext(conf)
    val sqlContext: SQLContext = new SQLContext(sc)

    val dataSetNames = Array("MaaP.Employee", "MaaP.Production_Access_Event", "MaaP.AppDir_Deployment")
    dataSetNames.foreach(dataSetName => {
      println(s"doing for $dataSetName")
      val jsonPath = getClass.getResource(s"./$dataSetName.json").getPath
      val parquetPath = jsonPath.replaceFirst(".json", ".parquet")

      val data = sqlContext.read.json(jsonPath)
      data.write.mode(Overwrite).parquet(parquetPath)
    }
    )
  }
}



<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.thoughtworks.mcs</groupId>
    <artifactId>gs-mcs</artifactId>
    <version>0.1-SNAPSHOT</version>
    <name>${project.artifactId}</name>
    <description>My wonderfull scala app</description>
    <inceptionYear>2010</inceptionYear>
    <licenses>
        <license>
            <name>My License</name>
            <url>http://....</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <pluginRepositories>
        <pluginRepository>
            <id>scala-tools.org</id>
            <name>Scala-tools Maven2 Repository</name>
            <url>http://scala-tools.org/repo-releases</url>
        </pluginRepository>
    </pluginRepositories>

    <properties>
        <maven.compiler.source>1.7</maven.compiler.source>
        <maven.compiler.target>1.7</maven.compiler.target>
        <encoding>UTF-8</encoding>
        <java.version>1.7</java.version>
        <scala.tools.version>2.10</scala.tools.version>
        <scala.version>${scala.tools.version}.6</scala.version>
        <spark.version>1.4.0</spark.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
            <version>${scala.version}</version>
        </dependency>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-compiler</artifactId>
            <version>${scala.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-core_2.10</artifactId>
            <version>${spark.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-sql_2.10</artifactId>
            <version>${spark.version}</version>
        </dependency>
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>2.8.2</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-io</artifactId>
            <version>1.3.2</version>
        </dependency>
        <!-- Test -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.specs2</groupId>
            <artifactId>specs2_${scala.tools.version}</artifactId>
            <version>1.13</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.scalatest</groupId>
            <artifactId>scalatest_${scala.tools.version}</artifactId>
            <version>2.2.4</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-core</artifactId>
            <version>1.3</version>
        </dependency>

    </dependencies>

    <build>
        <sourceDirectory>src/main/scala</sourceDirectory>
        <testSourceDirectory>src/test/scala</testSourceDirectory>
        <plugins>
            <plugin>
                <!-- see http://davidb.github.com/scala-maven-plugin -->
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
                <version>3.1.3</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>testCompile</goal>
                        </goals>
                        <configuration>
                            <args>
                                <arg>-make:transitive</arg>
                                <arg>-dependencyfile</arg>
                                <arg>${project.build.directory}/.scala_dependencies</arg>
                            </args>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <executions>
                    <execution><id>default-compile</id><phase>none</phase></execution>
                    <execution>
                        <id>default-testCompile</id><phase>none</phase>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.13</version>
                <configuration>
                    <useFile>false</useFile>
                    <disableXmlReport>true</disableXmlReport>
                    <!-- If you have classpath issue like NoDefClassError,... -->
                    <!-- useManifestOnlyJar>false</useManifestOnlyJar -->
                    <includes>
                        <include>**/*Test.*</include>
                        <include>**/*Suite.*</include>
                    </includes>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.scalatest</groupId>
                <artifactId>scalatest-maven-plugin</artifactId>
                <version>1.0</version>
                <executions>
                    <execution>
                        <id>test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>

